version: '3.8'

services:
  django-1:
    build: .
    command: gunicorn --bind 0.0.0.0:8000 e_commerce.wsgi:application
    volumes:
      - .:/app
    environment:
      - DEBUG=True
    networks:
      - monitoring

  django-2:
    build: .
    command: gunicorn --bind 0.0.0.0:8000 e_commerce.wsgi:application
    volumes:
      - .:/app
    environment:
      - DEBUG=True
    networks:
      - monitoring

  django-3:
    build: .
    command: gunicorn --bind 0.0.0.0:8000 e_commerce.wsgi:application
    volumes:
      - .:/app
    environment:
      - DEBUG=True
    networks:
      - monitoring

  db:
    image: postgres:17
    restart: always
    environment:
      POSTGRES_DB: e_commerce
      POSTGRES_USER: e_commerce_admin
      POSTGRES_PASSWORD: password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - monitoring

  nginx:
    image: nginx:alpine
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
    ports:
      - "80:80"
    depends_on:
      - django-1
    networks:
      - monitoring

  redis:
    image: redis:alpine
    restart: always
    ports:
      - "6379:6379"
    networks:
      - monitoring

  loki:
    image: grafana/loki:2.8.1
    container_name: loki
    ports:
      - "3100:3100"
    volumes:
      - ./loki:/etc/loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - monitoring

  promtail:
    image: grafana/promtail:2.8.1
    container_name: promtail
    volumes:
      - ./promtail:/etc/promtail
      - /var/log:/var/log
      - /var/lib/docker/containers:/var/lib/docker/containers
    command: -config.file=/etc/promtail/config.yml
    networks:
      - monitoring

  grafana:
    image: grafana/grafana:10.0.0
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - ./grafana:/var/lib/grafana
    networks:
      - monitoring

volumes:
  postgres_data:

networks:
  monitoring:
    driver: bridge
